use jsonrpsee::core::{client::ClientT, params::ObjectParams};
use jsonrpsee::rpc_params;
use jsonrpsee::ws_client::WsClientBuilder;

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;
use serde_json::json;

#[tokio::main]
async fn main() -> Result<()> {
    tracing_subscriber::fmt().init();

    let url = format!("ws://127.0.0.1:8080");
    let client = WsClientBuilder::default().build(&url).await?;

    let mut object_params = ObjectParams::new();
    let encrypted_transaction_json = json!({"encrypted_data": [
            "628c99aebf1f908347be8cd60b96b88750b83ec95427060489a7d4f21e30892469cf6648b68dff35513f7324cf98e5292010c9a196058779ee053471af70812db7d2606f5c232844a1f0ba6bffbb2ac42696745170ea391995162820c9665103e176657c9bcb0a62ecda9544c18591d8c30f1d8a1c41d80d6227b42849824106947fc94743c2f77171c3498c4e7b0f7f7f81df10b0fdfb37d3c288247424ca6b7267f74b090d65e55ee1014e84406ac30bb1887945680cad1497f0ce894df44b8b970b636e35cfa9d43a25605ee249f5ffb4cfdb366f7d2cbdb3678a567bcf1f0c4a87de526991c6b525adc0e141d88206d290b568a085829e16e457458cae3f4e004a63a6a885c1570a2b224712890c3d10ab67b599d1ed25586dda84636b3c338636b2ae573140fd27f92a979d06355de467ea44dfba0c83f6a3844a26103b94caa5c43941005517a77324149ed91b58fef682f778a8a5f252aa16ab01cd647754898ddfafa3ea1c24004e90291afeb340bda823146467d02ec4c8ecf1512181964fefea2055245d45369fd167fe57b20ef15618e642b0b5eb5ff0e6f89270e6920d59ab0c1ead7c9b606bf9939269361ac7133fd0c57fcd7910347dd82f28b262948f6de5c451d269b8bb658ad787aff9b6889b5359eb40da0271331bd350e3c51f65f2c18dfac4994d8bc253930ddc02147affa06f2ba0cd8c6840e28a51"
        ],
        "nonce": "5994ae332c124e31297219dc93f5f5b0ce1c5fa42fbb94e754f9d1b0ad408e0b",
        "t": 23,
        "g": "224184792289160841295325617317330398538669488643465532224493989831555991874021283666127771195926657727280044520628494878349492942448738665215653685078652689185113729578532781976755969753965457474403321281479724516931436354305353650683566678967852923668090758386096553358486292493687184162442016506532198546565863041911904550677048605484456786046935345780976516230488503964081048361086652300163635461142619718196160156723270513787492709470010841563918897170971292489696336730632420065307233127511537867338657995046350382536812659277968085667129635542478851663243910979324521893056560203616401275411781037583346992534",
        "n": "254544934853027892920064016796160422192345531375891092586006297566267109812945825390067036151261759623816700384036243952068087086324311613224444002414291349894835551872333829259105963029512828006430893078750112534357782697200222660237228382256599456267634252536175158322596312082364200799270836979444283469612838121840477584362645824250499134033893624576430092943873658815453075975176699055950057534666673863386313576664701474090683571330325184913739322363540817642476294340580737293634207711336281128861572436536877633029810047808776464982337425572648370829621991583205527817603630547248016625204413437688353103057"});

    if let Some(obj) = encrypted_transaction_json.as_object() {
        for (key, value) in obj {
            let _ = object_params.insert(key, value);
        }
    }

    let response: String = client.request("decrypt_transaction", object_params).await?;
    tracing::info!("{:?}", response);

    let response: String = client
        .request("decrypt_transaction", rpc_params![[
            "628c99aebf1f908347be8cd60b96b88750b83ec95427060489a7d4f21e30892469cf6648b68dff35513f7324cf98e5292010c9a196058779ee053471af70812db7d2606f5c232844a1f0ba6bffbb2ac42696745170ea391995162820c9665103e176657c9bcb0a62ecda9544c18591d8c30f1d8a1c41d80d6227b42849824106947fc94743c2f77171c3498c4e7b0f7f7f81df10b0fdfb37d3c288247424ca6b7267f74b090d65e55ee1014e84406ac30bb1887945680cad1497f0ce894df44b8b970b636e35cfa9d43a25605ee249f5ffb4cfdb366f7d2cbdb3678a567bcf1f0c4a87de526991c6b525adc0e141d88206d290b568a085829e16e457458cae3f4e004a63a6a885c1570a2b224712890c3d10ab67b599d1ed25586dda84636b3c338636b2ae573140fd27f92a979d06355de467ea44dfba0c83f6a3844a26103b94caa5c43941005517a77324149ed91b58fef682f778a8a5f252aa16ab01cd647754898ddfafa3ea1c24004e90291afeb340bda823146467d02ec4c8ecf1512181964fefea2055245d45369fd167fe57b20ef15618e642b0b5eb5ff0e6f89270e6920d59ab0c1ead7c9b606bf9939269361ac7133fd0c57fcd7910347dd82f28b262948f6de5c451d269b8bb658ad787aff9b6889b5359eb40da0271331bd350e3c51f65f2c18dfac4994d8bc253930ddc02147affa06f2ba0cd8c6840e28a51"
        ], "5994ae332c124e31297219dc93f5f5b0ce1c5fa42fbb94e754f9d1b0ad408e0b", 23, "224184792289160841295325617317330398538669488643465532224493989831555991874021283666127771195926657727280044520628494878349492942448738665215653685078652689185113729578532781976755969753965457474403321281479724516931436354305353650683566678967852923668090758386096553358486292493687184162442016506532198546565863041911904550677048605484456786046935345780976516230488503964081048361086652300163635461142619718196160156723270513787492709470010841563918897170971292489696336730632420065307233127511537867338657995046350382536812659277968085667129635542478851663243910979324521893056560203616401275411781037583346992534", "254544934853027892920064016796160422192345531375891092586006297566267109812945825390067036151261759623816700384036243952068087086324311613224444002414291349894835551872333829259105963029512828006430893078750112534357782697200222660237228382256599456267634252536175158322596312082364200799270836979444283469612838121840477584362645824250499134033893624576430092943873658815453075975176699055950057534666673863386313576664701474090683571330325184913739322363540817642476294340580737293634207711336281128861572436536877633029810047808776464982337425572648370829621991583205527817603630547248016625204413437688353103057", None::<String>])
        .await?;

    tracing::info!("{:?}", response);
    Ok(())
}
